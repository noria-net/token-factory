// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/tokenfactory/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgTokenFactoryCreateDenom defines the message structure for the CreateDenom gRPC service
// method. It allows an account to create a new denom. It requires a sender
// address and a sub denomination. The (sender_address, sub_denomination) tuple
// must be unique and cannot be re-used.
//
// The resulting denom created is defined as
// <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
// originally set to be the creator, but this can be changed later. The token
// denom does not indicate the current admin.
type MsgTokenFactoryCreateDenom struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// subdenom can be up to 44 "alphanumeric" characters long.
	Subdenom string `protobuf:"bytes,2,opt,name=subdenom,proto3" json:"subdenom,omitempty" yaml:"subdenom"`
}

func (m *MsgTokenFactoryCreateDenom) Reset()         { *m = MsgTokenFactoryCreateDenom{} }
func (m *MsgTokenFactoryCreateDenom) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryCreateDenom) ProtoMessage()    {}
func (*MsgTokenFactoryCreateDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{0}
}
func (m *MsgTokenFactoryCreateDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryCreateDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryCreateDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryCreateDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryCreateDenom.Merge(m, src)
}
func (m *MsgTokenFactoryCreateDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryCreateDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryCreateDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryCreateDenom proto.InternalMessageInfo

func (m *MsgTokenFactoryCreateDenom) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenFactoryCreateDenom) GetSubdenom() string {
	if m != nil {
		return m.Subdenom
	}
	return ""
}

// MsgTokenFactoryCreateDenomResponse is the return value of MsgTokenFactoryCreateDenom
// It returns the full string of the newly created denom
type MsgTokenFactoryCreateDenomResponse struct {
	NewTokenDenom string `protobuf:"bytes,1,opt,name=new_token_denom,json=newTokenDenom,proto3" json:"new_token_denom,omitempty" yaml:"new_token_denom"`
}

func (m *MsgTokenFactoryCreateDenomResponse) Reset()         { *m = MsgTokenFactoryCreateDenomResponse{} }
func (m *MsgTokenFactoryCreateDenomResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryCreateDenomResponse) ProtoMessage()    {}
func (*MsgTokenFactoryCreateDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{1}
}
func (m *MsgTokenFactoryCreateDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryCreateDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryCreateDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryCreateDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryCreateDenomResponse.Merge(m, src)
}
func (m *MsgTokenFactoryCreateDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryCreateDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryCreateDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryCreateDenomResponse proto.InternalMessageInfo

func (m *MsgTokenFactoryCreateDenomResponse) GetNewTokenDenom() string {
	if m != nil {
		return m.NewTokenDenom
	}
	return ""
}

// MsgTokenFactoryMint is the sdk.Msg type for allowing an admin account to mint
// more of a token.  For now, we only support minting to the sender account
type MsgTokenFactoryMint struct {
	Sender        string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Amount        types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	MintToAddress string     `protobuf:"bytes,3,opt,name=mintToAddress,proto3" json:"mintToAddress,omitempty" yaml:"mint_to_address"`
}

func (m *MsgTokenFactoryMint) Reset()         { *m = MsgTokenFactoryMint{} }
func (m *MsgTokenFactoryMint) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryMint) ProtoMessage()    {}
func (*MsgTokenFactoryMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{2}
}
func (m *MsgTokenFactoryMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryMint.Merge(m, src)
}
func (m *MsgTokenFactoryMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryMint proto.InternalMessageInfo

func (m *MsgTokenFactoryMint) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenFactoryMint) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgTokenFactoryMint) GetMintToAddress() string {
	if m != nil {
		return m.MintToAddress
	}
	return ""
}

type MsgTokenFactoryMintResponse struct {
}

func (m *MsgTokenFactoryMintResponse) Reset()         { *m = MsgTokenFactoryMintResponse{} }
func (m *MsgTokenFactoryMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryMintResponse) ProtoMessage()    {}
func (*MsgTokenFactoryMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{3}
}
func (m *MsgTokenFactoryMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryMintResponse.Merge(m, src)
}
func (m *MsgTokenFactoryMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryMintResponse proto.InternalMessageInfo

// MsgTokenFactoryBurn is the sdk.Msg type for allowing an admin account to burn
// a token.  For now, we only support burning from the sender account.
type MsgTokenFactoryBurn struct {
	Sender          string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Amount          types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	BurnFromAddress string     `protobuf:"bytes,3,opt,name=burnFromAddress,proto3" json:"burnFromAddress,omitempty" yaml:"burn_from_address"`
}

func (m *MsgTokenFactoryBurn) Reset()         { *m = MsgTokenFactoryBurn{} }
func (m *MsgTokenFactoryBurn) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryBurn) ProtoMessage()    {}
func (*MsgTokenFactoryBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{4}
}
func (m *MsgTokenFactoryBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryBurn.Merge(m, src)
}
func (m *MsgTokenFactoryBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryBurn proto.InternalMessageInfo

func (m *MsgTokenFactoryBurn) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenFactoryBurn) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgTokenFactoryBurn) GetBurnFromAddress() string {
	if m != nil {
		return m.BurnFromAddress
	}
	return ""
}

type MsgTokenFactoryBurnResponse struct {
}

func (m *MsgTokenFactoryBurnResponse) Reset()         { *m = MsgTokenFactoryBurnResponse{} }
func (m *MsgTokenFactoryBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryBurnResponse) ProtoMessage()    {}
func (*MsgTokenFactoryBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{5}
}
func (m *MsgTokenFactoryBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryBurnResponse.Merge(m, src)
}
func (m *MsgTokenFactoryBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryBurnResponse proto.InternalMessageInfo

// MsgTokenFactoryChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
// adminship of a denom to a new account
type MsgTokenFactoryChangeAdmin struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Denom    string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	NewAdmin string `protobuf:"bytes,3,opt,name=new_admin,json=newAdmin,proto3" json:"new_admin,omitempty" yaml:"new_admin"`
}

func (m *MsgTokenFactoryChangeAdmin) Reset()         { *m = MsgTokenFactoryChangeAdmin{} }
func (m *MsgTokenFactoryChangeAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryChangeAdmin) ProtoMessage()    {}
func (*MsgTokenFactoryChangeAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{6}
}
func (m *MsgTokenFactoryChangeAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryChangeAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryChangeAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryChangeAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryChangeAdmin.Merge(m, src)
}
func (m *MsgTokenFactoryChangeAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryChangeAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryChangeAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryChangeAdmin proto.InternalMessageInfo

func (m *MsgTokenFactoryChangeAdmin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenFactoryChangeAdmin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgTokenFactoryChangeAdmin) GetNewAdmin() string {
	if m != nil {
		return m.NewAdmin
	}
	return ""
}

// MsgTokenFactoryChangeAdminResponse defines the response structure for an executed
// MsgTokenFactoryChangeAdmin message.
type MsgTokenFactoryChangeAdminResponse struct {
}

func (m *MsgTokenFactoryChangeAdminResponse) Reset()         { *m = MsgTokenFactoryChangeAdminResponse{} }
func (m *MsgTokenFactoryChangeAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryChangeAdminResponse) ProtoMessage()    {}
func (*MsgTokenFactoryChangeAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{7}
}
func (m *MsgTokenFactoryChangeAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryChangeAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryChangeAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryChangeAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryChangeAdminResponse.Merge(m, src)
}
func (m *MsgTokenFactoryChangeAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryChangeAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryChangeAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryChangeAdminResponse proto.InternalMessageInfo

// MsgTokenFactorySetDenomMetadata is the sdk.Msg type for allowing an admin account to set
// the denom's bank metadata
type MsgTokenFactorySetDenomMetadata struct {
	Sender   string          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Metadata types1.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata" yaml:"metadata"`
}

func (m *MsgTokenFactorySetDenomMetadata) Reset()         { *m = MsgTokenFactorySetDenomMetadata{} }
func (m *MsgTokenFactorySetDenomMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactorySetDenomMetadata) ProtoMessage()    {}
func (*MsgTokenFactorySetDenomMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{8}
}
func (m *MsgTokenFactorySetDenomMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactorySetDenomMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactorySetDenomMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactorySetDenomMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactorySetDenomMetadata.Merge(m, src)
}
func (m *MsgTokenFactorySetDenomMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactorySetDenomMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactorySetDenomMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactorySetDenomMetadata proto.InternalMessageInfo

func (m *MsgTokenFactorySetDenomMetadata) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenFactorySetDenomMetadata) GetMetadata() types1.Metadata {
	if m != nil {
		return m.Metadata
	}
	return types1.Metadata{}
}

// MsgTokenFactorySetDenomMetadataResponse defines the response structure for an executed
// MsgTokenFactorySetDenomMetadata message.
type MsgTokenFactorySetDenomMetadataResponse struct {
}

func (m *MsgTokenFactorySetDenomMetadataResponse) Reset() {
	*m = MsgTokenFactorySetDenomMetadataResponse{}
}
func (m *MsgTokenFactorySetDenomMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactorySetDenomMetadataResponse) ProtoMessage()    {}
func (*MsgTokenFactorySetDenomMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{9}
}
func (m *MsgTokenFactorySetDenomMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactorySetDenomMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactorySetDenomMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactorySetDenomMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactorySetDenomMetadataResponse.Merge(m, src)
}
func (m *MsgTokenFactorySetDenomMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactorySetDenomMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactorySetDenomMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactorySetDenomMetadataResponse proto.InternalMessageInfo

type MsgTokenFactoryForceTransfer struct {
	Sender              string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Amount              types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	TransferFromAddress string     `protobuf:"bytes,3,opt,name=transferFromAddress,proto3" json:"transferFromAddress,omitempty" yaml:"transfer_from_address"`
	TransferToAddress   string     `protobuf:"bytes,4,opt,name=transferToAddress,proto3" json:"transferToAddress,omitempty" yaml:"transfer_to_address"`
}

func (m *MsgTokenFactoryForceTransfer) Reset()         { *m = MsgTokenFactoryForceTransfer{} }
func (m *MsgTokenFactoryForceTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryForceTransfer) ProtoMessage()    {}
func (*MsgTokenFactoryForceTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{10}
}
func (m *MsgTokenFactoryForceTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryForceTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryForceTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryForceTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryForceTransfer.Merge(m, src)
}
func (m *MsgTokenFactoryForceTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryForceTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryForceTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryForceTransfer proto.InternalMessageInfo

func (m *MsgTokenFactoryForceTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenFactoryForceTransfer) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgTokenFactoryForceTransfer) GetTransferFromAddress() string {
	if m != nil {
		return m.TransferFromAddress
	}
	return ""
}

func (m *MsgTokenFactoryForceTransfer) GetTransferToAddress() string {
	if m != nil {
		return m.TransferToAddress
	}
	return ""
}

type MsgTokenFactoryForceTransferResponse struct {
}

func (m *MsgTokenFactoryForceTransferResponse) Reset()         { *m = MsgTokenFactoryForceTransferResponse{} }
func (m *MsgTokenFactoryForceTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenFactoryForceTransferResponse) ProtoMessage()    {}
func (*MsgTokenFactoryForceTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_283b6c9a90a846b4, []int{11}
}
func (m *MsgTokenFactoryForceTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenFactoryForceTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenFactoryForceTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenFactoryForceTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenFactoryForceTransferResponse.Merge(m, src)
}
func (m *MsgTokenFactoryForceTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenFactoryForceTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenFactoryForceTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenFactoryForceTransferResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgTokenFactoryCreateDenom)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryCreateDenom")
	proto.RegisterType((*MsgTokenFactoryCreateDenomResponse)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryCreateDenomResponse")
	proto.RegisterType((*MsgTokenFactoryMint)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryMint")
	proto.RegisterType((*MsgTokenFactoryMintResponse)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryMintResponse")
	proto.RegisterType((*MsgTokenFactoryBurn)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryBurn")
	proto.RegisterType((*MsgTokenFactoryBurnResponse)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryBurnResponse")
	proto.RegisterType((*MsgTokenFactoryChangeAdmin)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryChangeAdmin")
	proto.RegisterType((*MsgTokenFactoryChangeAdminResponse)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryChangeAdminResponse")
	proto.RegisterType((*MsgTokenFactorySetDenomMetadata)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactorySetDenomMetadata")
	proto.RegisterType((*MsgTokenFactorySetDenomMetadataResponse)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactorySetDenomMetadataResponse")
	proto.RegisterType((*MsgTokenFactoryForceTransfer)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryForceTransfer")
	proto.RegisterType((*MsgTokenFactoryForceTransferResponse)(nil), "osmosis.tokenfactory.v1beta1.MsgTokenFactoryForceTransferResponse")
}

func init() {
	proto.RegisterFile("osmosis/tokenfactory/v1beta1/tx.proto", fileDescriptor_283b6c9a90a846b4)
}

var fileDescriptor_283b6c9a90a846b4 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0x02, 0xbf, 0x06, 0x86, 0x5f, 0x03, 0x2c, 0xa8, 0x75, 0x2d, 0xbb, 0x64, 0x82, 0x28,
	0x07, 0xb6, 0x29, 0x1e, 0x54, 0x12, 0x13, 0x28, 0xda, 0x78, 0xb0, 0x07, 0x57, 0x4e, 0x5e, 0x9a,
	0x69, 0x3b, 0x94, 0x0d, 0xee, 0x0c, 0xd9, 0x99, 0x0a, 0x7c, 0x04, 0x4f, 0x7a, 0xf4, 0x68, 0xfc,
	0x0e, 0xfa, 0x19, 0x38, 0x78, 0x20, 0x9e, 0x3c, 0x6d, 0x0c, 0x7c, 0x83, 0xfd, 0x04, 0x66, 0x67,
	0xf6, 0x5f, 0x77, 0x01, 0xb3, 0x78, 0xe0, 0x06, 0xfb, 0x3e, 0xcf, 0xf3, 0xbe, 0xcf, 0x3b, 0xef,
	0xbc, 0x1d, 0x70, 0x9f, 0x32, 0x87, 0x32, 0x9b, 0xd5, 0x39, 0xdd, 0xc7, 0x64, 0x17, 0xf5, 0x38,
	0x75, 0x8f, 0xeb, 0xef, 0x1b, 0x5d, 0xcc, 0x51, 0xa3, 0xce, 0x8f, 0xcc, 0x03, 0x97, 0x72, 0xaa,
	0xd6, 0x42, 0x98, 0x99, 0x86, 0x99, 0x21, 0x4c, 0x5b, 0x18, 0xd0, 0x01, 0x15, 0xc0, 0x7a, 0xf0,
	0x97, 0xe4, 0x68, 0x7a, 0x4f, 0x90, 0xea, 0x5d, 0xc4, 0x70, 0xac, 0xd8, 0xa3, 0x36, 0xc9, 0xc5,
	0xc9, 0x7e, 0x1c, 0x0f, 0xfe, 0x91, 0x71, 0x78, 0x04, 0xb4, 0x36, 0x1b, 0xec, 0x04, 0x09, 0x5b,
	0x32, 0xe1, 0xb6, 0x8b, 0x11, 0xc7, 0xcf, 0x31, 0xa1, 0x8e, 0xba, 0x0a, 0xca, 0x0c, 0x93, 0x3e,
	0x76, 0xab, 0xca, 0x92, 0xf2, 0x70, 0xaa, 0x39, 0xe7, 0x7b, 0x46, 0xe5, 0x18, 0x39, 0xef, 0x36,
	0xa0, 0xfc, 0x0e, 0xad, 0x10, 0xa0, 0xd6, 0xc1, 0x24, 0x1b, 0x76, 0xfb, 0x01, 0xad, 0x3a, 0x26,
	0xc0, 0xf3, 0xbe, 0x67, 0xcc, 0x84, 0xe0, 0x30, 0x02, 0xad, 0x18, 0x04, 0xf7, 0x00, 0xbc, 0x3c,
	0xb3, 0x85, 0xd9, 0x01, 0x25, 0x0c, 0xab, 0x4d, 0x30, 0x43, 0xf0, 0x61, 0x47, 0x74, 0xa4, 0x23,
	0xd5, 0x65, 0x29, 0x9a, 0xef, 0x19, 0xb7, 0xa5, 0x7a, 0x06, 0x00, 0xad, 0x0a, 0xc1, 0x87, 0x42,
	0x58, 0x68, 0xc1, 0x1f, 0x0a, 0x98, 0xcf, 0xa4, 0x6a, 0xdb, 0x84, 0x17, 0x71, 0xf7, 0x12, 0x94,
	0x91, 0x43, 0x87, 0x84, 0x0b, 0x6f, 0xd3, 0xeb, 0x77, 0x4d, 0xd9, 0x57, 0x33, 0xe8, 0x7b, 0x74,
	0x44, 0xe6, 0x36, 0xb5, 0x49, 0xf3, 0xd6, 0x89, 0x67, 0x94, 0x12, 0x25, 0x49, 0x83, 0x56, 0xc8,
	0x57, 0x37, 0x41, 0xc5, 0xb1, 0x09, 0xdf, 0xa1, 0x5b, 0xfd, 0xbe, 0x8b, 0x19, 0xab, 0x8e, 0x67,
	0xed, 0x04, 0xe1, 0x0e, 0xa7, 0x1d, 0x24, 0x01, 0xd0, 0x1a, 0x25, 0xc0, 0x45, 0x70, 0xef, 0x02,
	0x37, 0x51, 0xc7, 0xe0, 0xcf, 0xbc, 0xdb, 0xe6, 0xd0, 0x25, 0x37, 0xe3, 0xb6, 0x05, 0x66, 0xba,
	0x43, 0x97, 0xb4, 0x5c, 0xea, 0x8c, 0xfa, 0xad, 0xf9, 0x9e, 0x51, 0x95, 0x9c, 0x00, 0xd0, 0xd9,
	0x75, 0xa9, 0x93, 0x38, 0xce, 0x92, 0x2e, 0xf0, 0x1c, 0x78, 0x8a, 0x3d, 0x7f, 0x55, 0xf2, 0x63,
	0xbc, 0x87, 0xc8, 0x00, 0x6f, 0xf5, 0x1d, 0xbb, 0x90, 0xf5, 0x15, 0xf0, 0x5f, 0x7a, 0x86, 0x67,
	0x7d, 0xcf, 0xf8, 0x5f, 0x22, 0xc3, 0xd9, 0x92, 0x61, 0xb5, 0x01, 0xa6, 0x82, 0xb1, 0x43, 0x81,
	0x7e, 0x68, 0x69, 0xc1, 0xf7, 0x8c, 0xd9, 0x64, 0x22, 0x45, 0x08, 0x5a, 0x93, 0x04, 0x1f, 0x8a,
	0x2a, 0xe0, 0x72, 0x7e, 0xe0, 0x93, 0x1a, 0x63, 0x2b, 0x5f, 0x14, 0x60, 0x64, 0x60, 0x6f, 0x30,
	0x17, 0x83, 0xdc, 0xc6, 0x1c, 0xf5, 0x11, 0x47, 0x45, 0xfc, 0x58, 0x60, 0xd2, 0x09, 0x69, 0xe1,
	0x61, 0x2e, 0x26, 0x87, 0x49, 0xf6, 0xe3, 0xc3, 0x8c, 0xb4, 0x9b, 0x77, 0xc2, 0x03, 0x0d, 0x6f,
	0x6e, 0x44, 0x86, 0x56, 0xac, 0x03, 0x57, 0xc1, 0x83, 0xbf, 0x54, 0x18, 0xbb, 0xf9, 0x36, 0x06,
	0x6a, 0x19, 0x6c, 0x8b, 0xba, 0x3d, 0xbc, 0xe3, 0x22, 0xc2, 0x76, 0xb1, 0x7b, 0x33, 0x53, 0x69,
	0x81, 0x79, 0x1e, 0x16, 0x90, 0x9f, 0xcc, 0x25, 0xdf, 0x33, 0x6a, 0x92, 0x17, 0x81, 0x32, 0xd3,
	0x79, 0x11, 0x59, 0x7d, 0x05, 0xe6, 0xa2, 0xcf, 0xc9, 0xdd, 0x9e, 0x10, 0x8a, 0xba, 0xef, 0x19,
	0x5a, 0x46, 0x31, 0x7d, 0xbf, 0xf3, 0x44, 0xb8, 0x02, 0x96, 0xaf, 0x6a, 0x5b, 0xd4, 0xdf, 0xf5,
	0xef, 0x65, 0x30, 0xde, 0x66, 0x03, 0xf5, 0x83, 0x02, 0xa6, 0xd3, 0x8b, 0xfb, 0x89, 0x79, 0xd5,
	0x6f, 0x89, 0x79, 0xf9, 0xe2, 0xd5, 0x36, 0xaf, 0xcb, 0x8c, 0x57, 0x36, 0x07, 0x13, 0x62, 0xbd,
	0x36, 0x0a, 0x29, 0x05, 0x14, 0xed, 0x69, 0x61, 0x4a, 0x3a, 0xab, 0x58, 0x73, 0xc5, 0xb2, 0x06,
	0x94, 0x82, 0x59, 0xd3, 0x8b, 0x47, 0xf6, 0x3d, 0xb5, 0x69, 0x0a, 0xf6, 0x3d, 0x61, 0x16, 0xed,
	0x7b, 0x7e, 0x73, 0xa8, 0x9f, 0x15, 0x30, 0x9b, 0x5b, 0x15, 0xcf, 0x0a, 0xc9, 0x66, 0xe9, 0xda,
	0x8b, 0x7f, 0xa2, 0xc7, 0xa5, 0x7d, 0x54, 0x40, 0x65, 0xf4, 0xde, 0x6f, 0x14, 0x12, 0x1e, 0xe1,
	0x6a, 0xcd, 0xeb, 0x73, 0xa3, 0x8a, 0x9a, 0xaf, 0x4f, 0xce, 0x74, 0xe5, 0xf4, 0x4c, 0x57, 0x7e,
	0x9f, 0xe9, 0xca, 0xa7, 0x73, 0xbd, 0x74, 0x7a, 0xae, 0x97, 0x7e, 0x9d, 0xeb, 0xa5, 0xb7, 0x8f,
	0x07, 0x36, 0xdf, 0x1b, 0x76, 0xcd, 0x1e, 0x75, 0xea, 0x84, 0xba, 0x36, 0x5a, 0x23, 0x98, 0xcb,
	0x97, 0xdb, 0x5a, 0xf4, 0x74, 0x3b, 0x1a, 0x7d, 0xc9, 0xf1, 0xe3, 0x03, 0xcc, 0xba, 0x65, 0xf1,
	0xa2, 0x7a, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x65, 0x01, 0x29, 0xee, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateDenom(ctx context.Context, in *MsgTokenFactoryCreateDenom, opts ...grpc.CallOption) (*MsgTokenFactoryCreateDenomResponse, error)
	Mint(ctx context.Context, in *MsgTokenFactoryMint, opts ...grpc.CallOption) (*MsgTokenFactoryMintResponse, error)
	Burn(ctx context.Context, in *MsgTokenFactoryBurn, opts ...grpc.CallOption) (*MsgTokenFactoryBurnResponse, error)
	ChangeAdmin(ctx context.Context, in *MsgTokenFactoryChangeAdmin, opts ...grpc.CallOption) (*MsgTokenFactoryChangeAdminResponse, error)
	SetDenomMetadata(ctx context.Context, in *MsgTokenFactorySetDenomMetadata, opts ...grpc.CallOption) (*MsgTokenFactorySetDenomMetadataResponse, error)
	ForceTransfer(ctx context.Context, in *MsgTokenFactoryForceTransfer, opts ...grpc.CallOption) (*MsgTokenFactoryForceTransferResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDenom(ctx context.Context, in *MsgTokenFactoryCreateDenom, opts ...grpc.CallOption) (*MsgTokenFactoryCreateDenomResponse, error) {
	out := new(MsgTokenFactoryCreateDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.tokenfactory.v1beta1.Msg/CreateDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Mint(ctx context.Context, in *MsgTokenFactoryMint, opts ...grpc.CallOption) (*MsgTokenFactoryMintResponse, error) {
	out := new(MsgTokenFactoryMintResponse)
	err := c.cc.Invoke(ctx, "/osmosis.tokenfactory.v1beta1.Msg/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx context.Context, in *MsgTokenFactoryBurn, opts ...grpc.CallOption) (*MsgTokenFactoryBurnResponse, error) {
	out := new(MsgTokenFactoryBurnResponse)
	err := c.cc.Invoke(ctx, "/osmosis.tokenfactory.v1beta1.Msg/Burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeAdmin(ctx context.Context, in *MsgTokenFactoryChangeAdmin, opts ...grpc.CallOption) (*MsgTokenFactoryChangeAdminResponse, error) {
	out := new(MsgTokenFactoryChangeAdminResponse)
	err := c.cc.Invoke(ctx, "/osmosis.tokenfactory.v1beta1.Msg/ChangeAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDenomMetadata(ctx context.Context, in *MsgTokenFactorySetDenomMetadata, opts ...grpc.CallOption) (*MsgTokenFactorySetDenomMetadataResponse, error) {
	out := new(MsgTokenFactorySetDenomMetadataResponse)
	err := c.cc.Invoke(ctx, "/osmosis.tokenfactory.v1beta1.Msg/SetDenomMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ForceTransfer(ctx context.Context, in *MsgTokenFactoryForceTransfer, opts ...grpc.CallOption) (*MsgTokenFactoryForceTransferResponse, error) {
	out := new(MsgTokenFactoryForceTransferResponse)
	err := c.cc.Invoke(ctx, "/osmosis.tokenfactory.v1beta1.Msg/ForceTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateDenom(context.Context, *MsgTokenFactoryCreateDenom) (*MsgTokenFactoryCreateDenomResponse, error)
	Mint(context.Context, *MsgTokenFactoryMint) (*MsgTokenFactoryMintResponse, error)
	Burn(context.Context, *MsgTokenFactoryBurn) (*MsgTokenFactoryBurnResponse, error)
	ChangeAdmin(context.Context, *MsgTokenFactoryChangeAdmin) (*MsgTokenFactoryChangeAdminResponse, error)
	SetDenomMetadata(context.Context, *MsgTokenFactorySetDenomMetadata) (*MsgTokenFactorySetDenomMetadataResponse, error)
	ForceTransfer(context.Context, *MsgTokenFactoryForceTransfer) (*MsgTokenFactoryForceTransferResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateDenom(ctx context.Context, req *MsgTokenFactoryCreateDenom) (*MsgTokenFactoryCreateDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDenom not implemented")
}
func (*UnimplementedMsgServer) Mint(ctx context.Context, req *MsgTokenFactoryMint) (*MsgTokenFactoryMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (*UnimplementedMsgServer) Burn(ctx context.Context, req *MsgTokenFactoryBurn) (*MsgTokenFactoryBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (*UnimplementedMsgServer) ChangeAdmin(ctx context.Context, req *MsgTokenFactoryChangeAdmin) (*MsgTokenFactoryChangeAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdmin not implemented")
}
func (*UnimplementedMsgServer) SetDenomMetadata(ctx context.Context, req *MsgTokenFactorySetDenomMetadata) (*MsgTokenFactorySetDenomMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDenomMetadata not implemented")
}
func (*UnimplementedMsgServer) ForceTransfer(ctx context.Context, req *MsgTokenFactoryForceTransfer) (*MsgTokenFactoryForceTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceTransfer not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenFactoryCreateDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.tokenfactory.v1beta1.Msg/CreateDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDenom(ctx, req.(*MsgTokenFactoryCreateDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenFactoryMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.tokenfactory.v1beta1.Msg/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mint(ctx, req.(*MsgTokenFactoryMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenFactoryBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.tokenfactory.v1beta1.Msg/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgTokenFactoryBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenFactoryChangeAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.tokenfactory.v1beta1.Msg/ChangeAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeAdmin(ctx, req.(*MsgTokenFactoryChangeAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDenomMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenFactorySetDenomMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDenomMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.tokenfactory.v1beta1.Msg/SetDenomMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDenomMetadata(ctx, req.(*MsgTokenFactorySetDenomMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ForceTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenFactoryForceTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ForceTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.tokenfactory.v1beta1.Msg/ForceTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ForceTransfer(ctx, req.(*MsgTokenFactoryForceTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.tokenfactory.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDenom",
			Handler:    _Msg_CreateDenom_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _Msg_Mint_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "ChangeAdmin",
			Handler:    _Msg_ChangeAdmin_Handler,
		},
		{
			MethodName: "SetDenomMetadata",
			Handler:    _Msg_SetDenomMetadata_Handler,
		},
		{
			MethodName: "ForceTransfer",
			Handler:    _Msg_ForceTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/tokenfactory/v1beta1/tx.proto",
}

func (m *MsgTokenFactoryCreateDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryCreateDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryCreateDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subdenom) > 0 {
		i -= len(m.Subdenom)
		copy(dAtA[i:], m.Subdenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subdenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryCreateDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryCreateDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryCreateDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewTokenDenom) > 0 {
		i -= len(m.NewTokenDenom)
		copy(dAtA[i:], m.NewTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewTokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintToAddress) > 0 {
		i -= len(m.MintToAddress)
		copy(dAtA[i:], m.MintToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MintToAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnFromAddress) > 0 {
		i -= len(m.BurnFromAddress)
		copy(dAtA[i:], m.BurnFromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BurnFromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryChangeAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryChangeAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryChangeAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewAdmin) > 0 {
		i -= len(m.NewAdmin)
		copy(dAtA[i:], m.NewAdmin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAdmin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryChangeAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryChangeAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryChangeAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactorySetDenomMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactorySetDenomMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactorySetDenomMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactorySetDenomMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactorySetDenomMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactorySetDenomMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryForceTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryForceTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryForceTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferToAddress) > 0 {
		i -= len(m.TransferToAddress)
		copy(dAtA[i:], m.TransferToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferToAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TransferFromAddress) > 0 {
		i -= len(m.TransferFromAddress)
		copy(dAtA[i:], m.TransferFromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferFromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenFactoryForceTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenFactoryForceTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenFactoryForceTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTokenFactoryCreateDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Subdenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenFactoryCreateDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenFactoryMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.MintToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenFactoryMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTokenFactoryBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.BurnFromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenFactoryBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTokenFactoryChangeAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAdmin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenFactoryChangeAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTokenFactorySetDenomMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTokenFactorySetDenomMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTokenFactoryForceTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.TransferFromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransferToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenFactoryForceTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTokenFactoryCreateDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryCreateDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryCreateDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subdenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subdenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryCreateDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryCreateDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryCreateDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryChangeAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryChangeAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryChangeAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryChangeAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryChangeAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryChangeAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactorySetDenomMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactorySetDenomMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactorySetDenomMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactorySetDenomMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactorySetDenomMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactorySetDenomMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryForceTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryForceTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryForceTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenFactoryForceTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenFactoryForceTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenFactoryForceTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
